{"ast":null,"code":"const API_URL='http://localhost:3000/api/users';export const api={async getUsers(){const response=await fetch(API_URL);if(!response.ok)throw new Error('Failed to fetch users');return response.json();},async createUser(user){const response=await fetch(API_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(user)});if(!response.ok)throw new Error('Failed to create user');return response.json();},async updateUser(id,user){const response=await fetch(\"\".concat(API_URL,\"/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(user)});if(!response.ok)throw new Error('Failed to update user');return response.json();},async deleteUser(id){const response=await fetch(\"\".concat(API_URL,\"/\").concat(id),{method:'DELETE'});if(!response.ok)throw new Error('Failed to delete user');}};","map":{"version":3,"names":["API_URL","api","getUsers","response","fetch","ok","Error","json","createUser","user","method","headers","body","JSON","stringify","updateUser","id","concat","deleteUser"],"sources":["d:/Deepu/R&D/Docker/Web/src/api.ts"],"sourcesContent":["import { User } from './types';\n\nconst API_URL = 'http://localhost:3000/api/users';\n\nexport const api = {\n  async getUsers(): Promise<User[]> {\n    const response = await fetch(API_URL);\n    if (!response.ok) throw new Error('Failed to fetch users');\n    return response.json();\n  },\n\n  async createUser(user: Omit<User, 'id'>): Promise<User> {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(user)\n    });\n    if (!response.ok) throw new Error('Failed to create user');\n    return response.json();\n  },\n\n  async updateUser(id: number, user: Omit<User, 'id'>): Promise<User> {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(user)\n    });\n    if (!response.ok) throw new Error('Failed to update user');\n    return response.json();\n  },\n\n  async deleteUser(id: number): Promise<void> {\n    const response = await fetch(`${API_URL}/${id}`, { method: 'DELETE' });\n    if (!response.ok) throw new Error('Failed to delete user');\n  }\n};"],"mappings":"AAEA,KAAM,CAAAA,OAAO,CAAG,iCAAiC,CAEjD,MAAO,MAAM,CAAAC,GAAG,CAAG,CACjB,KAAM,CAAAC,QAAQA,CAAA,CAAoB,CAChC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,OAAO,CAAC,CACrC,GAAI,CAACG,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1D,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,KAAM,CAAAC,UAAUA,CAACC,IAAsB,CAAiB,CACtD,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,OAAO,CAAE,CACpCU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAC3B,CAAC,CAAC,CACF,GAAI,CAACN,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1D,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,KAAM,CAAAQ,UAAUA,CAACC,EAAU,CAAEP,IAAsB,CAAiB,CAClE,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAa,MAAA,CAAIjB,OAAO,MAAAiB,MAAA,CAAID,EAAE,EAAI,CAC/CN,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAC3B,CAAC,CAAC,CACF,GAAI,CAACN,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC1D,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,KAAM,CAAAW,UAAUA,CAACF,EAAU,CAAiB,CAC1C,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAa,MAAA,CAAIjB,OAAO,MAAAiB,MAAA,CAAID,EAAE,EAAI,CAAEN,MAAM,CAAE,QAAS,CAAC,CAAC,CACtE,GAAI,CAACP,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuB,CAAC,CAC5D,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}